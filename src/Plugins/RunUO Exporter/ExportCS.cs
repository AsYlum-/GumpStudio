using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Forms;

using GumpStudio.Elements;
using GumpStudio.Enums;
using GumpStudio.Forms;
using GumpStudio.Plugins;
using HtmlElement = GumpStudio.Elements.HtmlElement;

namespace RunUOExporter
{
    public class ExportCs : BasePlugin
    {
        private const string CSharpFileTemplate = "\r\n//////////////////////////////////////////////////////////////////////\r\n// Automatically generated by Bradley's GumpStudio and roadmaster's \r\n// exporter.dll,  Special thanks goes to Daegon whose work the exporter\r\n// was based off of, and Shadow wolf for his Template Idea.\r\n//////////////////////////////////////////////////////////////////////\r\n{comment}#define RunUo2_0\r\n\r\nusing System;\r\nusing Server;\r\nusing Server.Gumps;\r\nusing Server.Network;\r\nusing Server.Commands;\r\n\r\nnamespace {namespace}\r\n{\r\n    public class {class_name} : Gump\r\n    {\r\n        Mobile caller;\r\n\r\n        public static void Initialize()\r\n        {\r\n#if(RunUo2_0)\r\n            CommandSystem.Register(\"{MyGump}\", AccessLevel.Administrator, new CommandEventHandler({MyGump}_OnCommand));\r\n#else\r\n            Register(\"{MyGump}\", AccessLevel.Administrator, new CommandEventHandler({MyGump}_OnCommand));\r\n#endif\r\n        }\r\n\r\n        [Usage(\"{MyGump}\")]\r\n        [Description(\"Makes a call to your custom gump.\")]\r\n        public static void {MyGump}_OnCommand(CommandEventArgs e)\r\n        {\r\n            caller = e.Mobile;\r\n\r\n            if (caller.HasGump(typeof({class_name})))\r\n                caller.CloseGump(typeof({class_name}));\r\n            caller.SendGump(new {class_name}(caller));\r\n        }\r\n\r\n        public {class_name}(Mobile from) : this()\r\n        {\r\n            caller = from;\r\n        }\r\n\r\n        public {class_name}() : base( {x_position}, {y_position} )\r\n        {\r\n            {gump_commands}\r\n\r\n            {text_relays}\r\n        }\r\n\r\n        {gump_enums}\r\n\r\n        public override void OnResponse(NetState sender, RelayInfo info)\r\n        {\r\n            Mobile from = sender.Mobile;\r\n\r\n            switch(info.ButtonID)\r\n            {\r\n                {case_strings}\r\n            }\r\n        }\r\n    }\r\n}";
        private string _comment = "";
        private DesignerForm _designer;
        private MenuItem _menuExport;
        private ScriptExportOptions _optionsMenu;

        public string Generate(bool intStyle, string commandName, bool commandcall)
        {
            if (_optionsMenu == null)
            {
                MenuExportCS_Click(null, null);
                return "";
            }
            try
            {
                string str1 = CSharpFileTemplate;
                ArrayList arrayList1 = new ArrayList();
                ArrayList arrayList2 = new ArrayList();
                ArrayList arrayList3 = new ArrayList();
                List<int> intList = new List<int>
                {
                    0
                };
                //Dictionary<string, string> dictionary = new Dictionary<string, string>();
                if (_optionsMenu.ExtraOptions.Checked || _optionsMenu.SaveTypeFile.Checked)
                {
                    arrayList1.Add($"this.Closable={_optionsMenu.CheckClosable.Checked.ToString().ToLower()};");
                    arrayList1.Add($"this.Disposable={_optionsMenu.CheckDisposable.Checked.ToString().ToLower()};");
                    arrayList1.Add($"this.Dragable={_optionsMenu.CheckMovable.Checked.ToString().ToLower()};");
                    arrayList1.Add($"this.Resizable={_optionsMenu.CheckResizable.Checked.ToString().ToLower()};\r\n");
                }
                if (_designer.Stacks.Count != 0)
                {
                    uint num1 = 0;
                    foreach (GroupElement stack in _designer.Stacks)
                    {
                        arrayList1.Add($"AddPage({num1});");
                        if (stack.Elements != null && stack.Elements.Length != 0)
                        {
                            foreach (BaseElement baseElement in stack.GetElementsRecursive())
                            {
                                int num2 = 0;
                                int num3 = 0;
                                switch (baseElement)
                                {
                                    case AlphaElement _:
                                        AlphaElement alphaElement = (AlphaElement)baseElement;
                                        string str2 =
                                            $"AddAlphaRegion({alphaElement.X}, {alphaElement.Y}, {alphaElement.Width}, {alphaElement.Height});";
                                        arrayList1.Add(str2);
                                        continue;
                                    case BackgroundElement _:
                                        BackgroundElement backgroundElement = (BackgroundElement)baseElement;
                                        string str3 =
                                            $"AddBackground({backgroundElement.X}, {backgroundElement.Y}, {backgroundElement.Width}, {backgroundElement.Height}, {backgroundElement.GumpId});";
                                        arrayList1.Add(str3);
                                        continue;
                                    case RadioElement _:
                                        RadioElement radioElement = (RadioElement)baseElement;
                                        string str4;
                                        if (intStyle)
                                        {
                                            str4 =
                                                $"AddRadio({radioElement.X}, {radioElement.Y}, {radioElement.UnCheckedId}, {radioElement.CheckedId}, {radioElement.Checked.ToString().ToLower()}, {radioElement.Value});";
                                        }
                                        else
                                        {
                                            str4 =
                                                $"AddRadio({radioElement.X}, {radioElement.Y}, {radioElement.UnCheckedId}, {radioElement.CheckedId}, {radioElement.Checked.ToString().ToLower()}, (int)Buttons.{radioElement.Name.Replace(" ", "")});";
                                            arrayList3.Add(radioElement.Name.Replace(" ", ""));
                                        }
                                        arrayList1.Add(str4);
                                        continue;
                                    case CheckboxElement _:
                                        CheckboxElement checkboxElement = (CheckboxElement)baseElement;
                                        string str5;
                                        if (intStyle)
                                        {
                                            str5 =
                                                $"AddCheck({checkboxElement.X}, {checkboxElement.Y}, {checkboxElement.UnCheckedId}, {checkboxElement.CheckedId}, {checkboxElement.Checked.ToString().ToLower()}, {checkboxElement.Group});";
                                        }
                                        else
                                        {
                                            str5 =
                                                $"AddCheck({checkboxElement.X}, {checkboxElement.Y}, {checkboxElement.UnCheckedId}, {checkboxElement.CheckedId}, {checkboxElement.Checked.ToString().ToLower()}, (int)Buttons.{checkboxElement.Name.Replace(" ", "")});";
                                            arrayList3.Add(checkboxElement.Name.Replace(" ", ""));
                                        }
                                        arrayList1.Add(str5);
                                        continue;
                                    case ButtonElement _:
                                        ButtonElement buttonElement = (ButtonElement)baseElement;
                                        if (buttonElement.ButtonType == ButtonTypeEnum.Page)
                                        {
                                            num2 = buttonElement.Param;
                                        }
                                        else
                                        {
                                            if (buttonElement.Param != 0)
                                            {
                                                intList.Add(buttonElement.Param);
                                            }

                                            num3 = buttonElement.Param;
                                        }
                                        // if (!string.IsNullOrEmpty(buttonElement.Code))
                                        // {
                                        //     string str6 = buttonElement.Code;
                                        //     //dictionary.Add(buttonElement.Name, str6);
                                        // }
                                        string str7;
                                        if (intStyle)
                                        {
                                            str7 =
                                                $"AddButton({buttonElement.X}, {buttonElement.Y}, {buttonElement.NormalId}, {buttonElement.PressedId}, {num3}, {(buttonElement.ButtonType == ButtonTypeEnum.Page ? "GumpButtonType.Page" : "GumpButtonType.Reply")}, {num2});";
                                        }
                                        else
                                        {
                                            str7 =
                                                $"AddButton({buttonElement.X}, {buttonElement.Y}, {buttonElement.NormalId}, {buttonElement.PressedId}, (int)Buttons.{buttonElement.Name.Replace(" ", "")}, {(buttonElement.ButtonType == ButtonTypeEnum.Page ? "GumpButtonType.Page" : "GumpButtonType.Reply")}, {num2});";
                                            arrayList3.Add(buttonElement.Name.Replace(" ", ""));
                                        }
                                        arrayList1.Add(str7);
                                        continue;
                                    case ImageElement _:
                                        ImageElement imageElement = (ImageElement)baseElement;
                                        string str8;
                                        if (imageElement.Hue != null && imageElement.Hue.Index != 0)
                                        {
                                            str8 =
                                                $"AddImage({imageElement.X}, {imageElement.Y}, {imageElement.GumpId}, {imageElement.Hue});";
                                        }
                                        else
                                        {
                                            str8 =
                                                $"AddImage({imageElement.X}, {imageElement.Y}, {imageElement.GumpId});";
                                        }

                                        arrayList1.Add(str8);
                                        continue;
                                    case TiledElement _:
                                        TiledElement tiledElement = (TiledElement)baseElement;
                                        string str9 =
                                            $"AddImageTiled({tiledElement.X}, {tiledElement.Y}, {tiledElement.Width}, {tiledElement.Height}, {tiledElement.GumpId});";
                                        arrayList1.Add(str9);
                                        continue;
                                    case ItemElement _:
                                        ItemElement itemElement = (ItemElement)baseElement;
                                        string str10;
                                        if (itemElement.Hue != null && itemElement.Hue.Index != 0)
                                        {
                                            str10 =
                                                $"AddItem({itemElement.X}, {itemElement.Y}, {itemElement.ItemID}, {itemElement.Hue});";
                                        }
                                        else
                                        {
                                            str10 = $"AddItem({itemElement.X}, {itemElement.Y}, {itemElement.ItemID});";
                                        }

                                        arrayList1.Add(str10);
                                        continue;
                                    case LabelElement _:
                                        LabelElement labelElement = (LabelElement)baseElement;
                                        string str11 =
                                            $"AddLabel({labelElement.X}, {labelElement.Y}, {labelElement.Hue}, @\"{labelElement.Text.Replace("\"", "\\\"")}\");";
                                        arrayList1.Add(str11);
                                        continue;
                                    case TextEntryElement _:
                                        TextEntryElement textEntryElement = (TextEntryElement)baseElement;
                                        string str12 = textEntryElement.MaxLength != 0
                                            ? $"AddTextEntry({textEntryElement.X}, {textEntryElement.Y}, {textEntryElement.Width}, {textEntryElement.Height}, {textEntryElement.Hue}, {textEntryElement.Id}, @\"{(textEntryElement.InitialText != null ? textEntryElement.InitialText.Replace("\"", "\\\"") : "")}\", {textEntryElement.MaxLength});"
                                            : $"AddTextEntry({textEntryElement.X}, {textEntryElement.Y}, {textEntryElement.Width}, {textEntryElement.Height}, {textEntryElement.Hue}, {textEntryElement.Id}, @\"{(textEntryElement.InitialText != null ? textEntryElement.InitialText.Replace("\"", "\\\"") : "")}\");";

                                        arrayList1.Add(str12);
                                        string str13 = string.Format("TextRelay entry{0} = info.GetTextEntry({0});\r\n\t\t\tstring text{0} = (entry{0} == null ? \"\" : entry{0}.Text.Trim());\r\n", textEntryElement.Id);
                                        arrayList2.Add(str13);
                                        continue;
                                    case HtmlElement _:
                                        HtmlElement htmlElement = (HtmlElement)baseElement;
                                        if (htmlElement.TextType == HtmlElementType.Localized)
                                        {
                                            arrayList1.Add(
                                                $"AddHtmlLocalized( {htmlElement.X}, {htmlElement.Y}, {htmlElement.Width}, {htmlElement.Height}, {htmlElement.CliLocId}, {0}, (bool){htmlElement.ShowBackground.ToString().ToLower()}, (bool){htmlElement.ShowScrollbar.ToString().ToLower()});");
                                            continue;
                                        }
                                        arrayList1.Add(
                                            $"AddHtml( {htmlElement.X}, {htmlElement.Y}, {htmlElement.Width}, {htmlElement.Height}, @\"{htmlElement.Html.Replace("\"", "\\\"")}\", (bool){htmlElement.ShowBackground.ToString().ToLower()}, (bool){htmlElement.ShowScrollbar.ToString().ToLower()});");
                                        continue;
                                    default:
                                        arrayList1.Add($"// Unsupported Element Type: {baseElement.GetType()}");
                                        continue;
                                }
                            }
                        }
                        ++num1;
                    }
                }
                const string oldValue = "\t";
                string newValue1 = "";
                foreach (string str2 in arrayList2)
                {
                    newValue1 += string.Format("{1}{1}{1}{0}\r\n", str2, oldValue);
                }

                intList.Sort();
                string newValue2 = "";
                const string str14 = "\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}";
                if (intStyle)
                {
                    foreach (int num in intList)
                    {
                        newValue2 += string.Format("{1}{1}{1}{1}case {0}:{2}\r\n", num.ToString(), oldValue, str14);
                    }
                }
                else if (arrayList3 != null && arrayList3.Count != 0)
                {
                    foreach (string str2 in arrayList3)
                    {
                        newValue2 += string.Format("{1}{1}{1}{1}case (int)Buttons.{0}:{2}\r\n", str2, oldValue, str14);
                    }
                }
                string newValue3 = "";
                foreach (string str2 in arrayList1)
                {
                    newValue3 += string.Format("{0}\r\n{1}{1}{1}", str2, oldValue);
                }

                string newValue4 = "";
                if (arrayList3 != null && arrayList3.Count != 0)
                {
                    string str2 = string.Format("{0}{0}public enum Buttons\r\n{0}{0}{{\r\n", oldValue);
                    foreach (string str3 in arrayList3)
                    {
                        str2 += string.Format("{1}{1}{1}{0},\r\n", str3, oldValue);
                    }

                    newValue4 = str2 + string.Format("{0}{0}}}\r\n", oldValue);
                }
                if (commandcall)
                {
                    _comment = "//";
                }

                if (_optionsMenu.SaveTypeFile.Checked)
                {
                    str1 = str1.Replace("{gump_commands}", newValue3)
                        .Replace("{namespace}", _optionsMenu.NamespaceTxt.Text)
                        .Replace("{class_name}", _optionsMenu.ClassnameTxt.Text)
                        .Replace("{x_position}", _optionsMenu.X.Text).Replace("{y_position}", _optionsMenu.Y.Text)
                        .Replace("{text_relays}", newValue1).Replace("{gump_enums}", newValue4)
                        .Replace("{case_strings}", newValue2).Replace("{MyGump}", commandName)
                        .Replace("{comment}", _comment);
                }
                else if (_optionsMenu.SaveTypeClip.Checked)
                {
                    if (_optionsMenu.ClipSaveNameClass.Checked)
                    {
                        string str2 = _optionsMenu.CheckEnums.Checked ? "\r\n\r\n" + newValue4 : "";
                        newValue3 = string.Format(
                            "namespace {0}\r\n{{\r\npublic class {1} : Server.Gumps.Gump\r\n{{\r\npublic {1}() : base({3}, {4})\r\n{{\r\n{2}}}{5}}}\r\n}}",
                            _optionsMenu.NamespaceTxt.Text, _optionsMenu.ClassnameTxt.Text,
                            newValue3, _optionsMenu.X.Text, _optionsMenu.Y.Text,
                            str2);
                    }
                    str1 = newValue3.Replace(oldValue, "");
                }
                _optionsMenu?.Close();

                return str1;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
                return "";
            }
        }

        public override PluginInfo GetPluginInfo()
        {
            return new PluginInfo
            {
                AuthorEmail = "roadmaster64@comcast.net",
                AuthorName = "roadmaster / Mark Sweetman",
                Description = "Exports a given design to a usable script in various formats. This Plugin is based off of the original Gump Exporter by Daegon / Eric Brown, without who this would not have been possible.",
                PluginName = "RunUO Export",
                Version = "2.0"
            };
        }

        public override void Load(DesignerForm frmDesigner)
        {
            _designer = frmDesigner;
            _designer.Icon = frmDesigner.Icon;
            _menuExport = new MenuItem("Export to Script file", MenuExportCS_Click, Shortcut.CtrlE);
            _designer.MnuFileImport.Enabled = true;
            _designer.MnuFileImport.MenuItems.Add(_menuExport);
            base.Load(frmDesigner);
        }

        private void MenuExportCS_Click(object sender, EventArgs e)
        {
            if (_optionsMenu == null)
            {
                _optionsMenu = new ScriptExportOptions(this)
                {
                    CheckClosable = { Checked = _designer.GumpProperties.Closeable },
                    CheckDisposable = { Checked = _designer.GumpProperties.Disposable },
                    CheckMovable = { Checked = _designer.GumpProperties.Moveable },
                    X = { Text = _designer.GumpProperties.Location.X.ToString() },
                    Y = { Text = _designer.GumpProperties.Location.Y.ToString() }
                };
            }

            _optionsMenu.ShowDialog();
        }

        public override string Name => GetPluginInfo().PluginName;
    }
}
